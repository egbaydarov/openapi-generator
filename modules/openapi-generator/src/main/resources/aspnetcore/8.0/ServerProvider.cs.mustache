{{>partial_header}}
#nullable enable
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.ApplicationParts;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Serilog;
using Serilog.Events;
using Serilog.Formatting.Compact;

namespace {{packageName}};

public class ServerProvider<TConfiguration>
{
    private readonly List<Action<IServiceCollection>> registerRequestHandlerActions = [];
    private readonly List<Action<WebApplication>> registerMiddlewareActions = [];

    public (Task start, Task shutdown) StartServerAsync(
        string[] args,
        CancellationToken cancellationToken)
    {
        var builder = WebApplication.CreateBuilder(args: args);
        builder.Configuration
            .AddEnvironmentVariables()
            .AddCommandLine(args: args);
        builder.Logging
            .AddSerilog(dispose: true);
        builder.Host
            .UseSerilog(
                configureLogger: (context, services, configuration) => configuration
                    .MinimumLevel.Override(source: "Microsoft", minimumLevel: LogEventLevel.Warning)
                    .MinimumLevel.Override(source: "Microsoft.Hosting.Lifetime", minimumLevel: LogEventLevel.Information)
                    .ReadFrom.Configuration(configuration: context.Configuration)
                    .ReadFrom.Services(services: services)
                    .Enrich.FromLogContext()
                    .WriteTo.Console(formatter: new RenderedCompactJsonFormatter()));
        builder
            .Services
            .AddMvc()
            .EnableInternalControllers();
        builder.Services.AddSwaggerGen();
        builder.Services.AddHealthChecks();
        this.registerRequestHandlerActions
            .ForEach(action: action => action(obj: builder.Services));
        
        var app = builder.Build();
        app.UseSwaggerUI();
        app.UseSwagger();
        app.UseRouting();
        app.UseAuthorization();
        app.MapControllers();
        app.MapHealthChecks(pattern: "/health");
        this.registerMiddlewareActions.ForEach(action: action => action(obj: app));

        return (app.StartAsync(cancellationToken: cancellationToken), app.WaitForShutdownAsync(token: cancellationToken));
    }

    public ServerProvider<TConfiguration> AddRequestHandler<TInterface>(
        Func<TConfiguration, Serilog.ILogger, TInterface> requestHandlerFactory)
        where TInterface : class
    {
        this.registerRequestHandlerActions.Add(services =>
            services.AddSingleton(
                srv => requestHandlerFactory(srv.GetService<IConfiguration>()!.Get<TConfiguration>()!, Log.Logger)));

        return this;
    }

    public ServerProvider<TConfiguration> AddMiddleware<TMiddleware>()
        where TMiddleware : class
    {
        this.registerMiddlewareActions.Add(
            item: app => app.UseMiddleware<TMiddleware>());

        return this;
    }
}